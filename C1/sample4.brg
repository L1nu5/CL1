sample4.brg: 
 
%{ 
#include <assert.h> 
#include <stdlib.h>
#include <stdio.h> 
enum { 
	 	ADDI=309, ADDRLP=295, ASGNI=53, 
	 	CNSTI=21, CVCI=85, I0I=661, INDIRC=67 
	}; 	 
 
#define STATE_TYPE long 
typedef struct tree {  	int op; 
 	struct tree *kids[2];  	int val; 
 	struct { STATE_TYPE state; } x; } *NODEPTR_TYPE, *Tree; 
#define LEFT_CHILD(p) ((p)->kids[0]) 
#define RIGHT_CHILD(p) ((p)->kids[1]) #define PANIC printf 
#define STATE_LABEL(p) ((p)->x.state) 
 
int OP_LABEL(NODEPTR_TYPE p) { 
	 	switch (p->op) { 
 	case CNSTI:  if (p->val == 0) return 661 /* I0I */;  	default:     return p->op; 
	 	} 
} 
 
static void burm_trace(NODEPTR_TYPE, int, int, int); 
%} 
%term ADDI=309 ADDRLP=295 ASGNI=53 
%term CNSTI=21 CVCI=85 I0I=661 INDIRC=67 
%% 
stmt: 	ASGNI(disp,reg) = 4 (1); 
stmt: 	reg = 5; 
reg: 	ADDI(reg,rc) = 6 (1); 
reg: 	CVCI(INDIRC(disp)) = 7 (1); 
reg: 	I0I = 8; 
reg: 	disp = 9 (1); 
disp: 	ADDI(reg,con) = 10; 
disp: 	ADDRLP = 11; 
rc: 	con = 12; 
rc: 	reg = 13; 
con: 	CNSTI = 14; 
con: %% 	I0I = 15; 
 
static int trace; 
 
/* burm_trace - print trace message for matching p; decrement trace */ static void burm_trace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost) {  	if (trace < 0) 
 	 	fprintf(stderr, "0x%p matched %s = %d with cost %d vs. %d\n", p,  	 	 	burm_string[eruleno], eruleno, cost, bestcost); 
	 	else if (trace > 0 && cost < bestcost) { 
	 	 	--trace; 
	 	 	fprintf(stderr, "0x%p matched %s = %d with cost %d\n", p, 
	 	 	 	burm_string[eruleno], eruleno, cost); 
	 	} 
} 
 
/* dumpCover - print the matched cover for p */ static void dumpCover(Tree p, int goalnt, int indent) {  	int eruleno = burm_rule(p->x.state, goalnt); 
 	short *nts = burm_nts[eruleno];  	Tree kids[10]; 
	 	int i; 
 
	 	for (i = 0; i < indent; i++) 
	 	 	fprintf(stderr, " "); 
 fprintf(stderr, "%s\n", burm_string[eruleno]);  burm_kids(p, eruleno, kids); 
	 	for (i = 0; nts[i]; i++) 
	 	 	dumpCover(kids[i], nts[i], indent + 1); 
} 
 
static void gen(NODEPTR_TYPE p) {  	if (burm_label(p) == 0) 
	 	 	fprintf(stderr, "no cover\n"); 
	 	else 
	 	 	dumpCover(p, 1, 0); 
} 
 
static Tree tree(int op, Tree l, Tree r) { 
	 	Tree t = malloc(sizeof *t); 
 
	 	t->op = op; 
 	t->kids[0] = l; t->kids[1] = r;  	t->val = 0;  	t->x.state = 0; 
	 	return t; 
} 
 
main(void) {  	Tree t;  if (getenv("Trace"))   trace = atoi(getenv("Trace")); 
 	printf("i = c + 4;\n");  	t = tree(ASGNI,  	 	tree(ADDRLP, 0, 0),  	 	tree(ADDI, 
	 	 	 	tree(CVCI, tree(INDIRC, tree(ADDRLP, 0, 0), 0), 0), 
	 	 	 	(t = tree(CNSTI, 0, 0), t->val = 4, t) 
	 	 	) 
	 	); 
 	gen(t);  	return 0; 
} 
 
sample4.brg %{ 
#include <stdio.h> 
#include <assert.h> 
#include <stdlib.h> 
 
#define TRACE 
 
enum { MOVE=1, MEM=2, PLUS=3, NAME=4, CONST=6 }; 
 
#define STATE_TYPE void* typedef struct tree { 
	 	int op; 
 	struct tree *kids[2];  	STATE_TYPE state_label; 
} *NODEPTR_TYPE; 
#define OP_LABEL(p) ((p)->op) 
#define LEFT_CHILD(p) ((p)->kids[0]) 
#define RIGHT_CHILD(p) ((p)->kids[1]) 
#define STATE_LABEL(p) ((p)->state_label) 
#define PANIC printf 
 
static void burm_trace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost) { 
#ifdef TRACE  	extern char *burm_string[]; 
 
 	fprintf(stderr, "0x%p matched %s with cost %d vs. %d\n", p,  	 	burm_string[eruleno], cost, bestcost); 
#endif 
} 
%} 
%term MOVE=1 MEM=2 PLUS=3 NAME=4 CONST=6 
%% 
stm:    MOVE(MEM(loc),reg) = 1 (4); 
 
reg:    PLUS(con,reg) = 2 (3); reg:    PLUS(reg,reg) = 3 (2); reg:    PLUS(MEM(loc),reg) = 4 (4); reg:    MEM(loc) = 5 (4); reg:    con = 6 (2); 
 
loc:    reg = 7; loc:    NAME = 8; loc:    PLUS(NAME,reg) = 9; 
 
con:    CONST = 10; 
%% 
static void dumpCover(NODEPTR_TYPE p, int goalnt, int indent) { 
#ifdef TRACE  	int eruleno = burm_rule(STATE_LABEL(p), goalnt);  	short *nts = burm_nts[eruleno];  	NODEPTR_TYPE kids[10];  	int i; 
 
	 	for (i = 0; i < indent; i++) 
	 	 	fprintf(stderr, " "); 
 	fprintf(stderr, "%s\n", burm_string[eruleno]);  	burm_kids(p, eruleno, kids);  	for (i = 0; nts[i]; i++)  	 	dumpCover(kids[i], nts[i], indent + 1); 
#endif 
} 
 
static NODEPTR_TYPE tree(int op, NODEPTR_TYPE l, NODEPTR_TYPE r) { 
	 	NODEPTR_TYPE p = malloc(sizeof *p); 
 
 	assert(p);  	p->op = op; 
	 	p->kids[0] = l; p->kids[1] = r; 
	 	return p; 
} 
 
main(void) { 
	 	NODEPTR_TYPE p; 
 
 	p = tree(MOVE,  	 	tree(MEM, tree(NAME, 0, 0), 0), 
 	 	tree(PLUS,  	 	 	tree(MEM, tree(PLUS,  	 	 	 	tree(NAME, 0, 0), 
 	 	 	 	tree(MEM, tree(NAME, 0, 0), 0)), 0),  	 	 	tree(CONST, 0, 0) ) );  	burm_label(p);  	dumpCover(p, 1, 0);  	return 0; 
} 
 
Output: 
[BatchQ1@localhost ~]$ su Password:  
[root@localhost BatchQ1]# cd iburg-master/ 
[root@localhost iburg-master]# make cc    -c -o iburg.o iburg.c yacc  gram.y  mv -f y.tab.c gram.c cc    -c -o gram.o gram.c cc -o iburg  iburg.o gram.o rm gram.c 
[root@localhost iburg-master]# cp iburg /usr/local 
[root@localhost iburg-master]# ./iburg -I sample4.brg sample4.c 
[root@localhost iburg-master]# gcc -o test4 sample4.c 
[root@localhost iburg-master]# ./test4 sample4.c 
i = c + 4; 
stmt: ASGNI(disp,reg)  disp: ADDRLP  reg: disp   disp: ADDI(reg,con)    reg: CVCI(INDIRC(disp))     disp: ADDRLP    con: CNSTI 
[root@localhost iburg-master]# ./iburg -I sample5.brg sample5.c 
[root@localhost iburg-master]# gcc -o test5 sample5.c [root@localhost iburg-master]# ./test5 sample5.c stm: MOVE(MEM(loc),reg)  loc: NAME  reg: PLUS(MEM(loc),reg)   loc: PLUS(NAME,reg)    reg: MEM(loc)     loc: NAME   reg: con 
   con: CONST 
